# -*- coding: utf-8 -*-
"""Handwritten_Digit_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rNpdWQ7eoTsHyKZu587wXbKYqhx89fC4

## **Hand-Written Digit Prediction using ANN on MNIST Handwritten Dataset**

Welcome to the "**Handwritten Digit Prediction using ANN on MNIST Handwritten Dataset**" project.

In this Python code, we'll employ an **Artificial Neural Network (ANN)** to accurately predict numerical values (ranging from 0 to 9) based on the **MNIST dataset**, which is a collection of 70,000 handwritten digits. Through this implementation, we delve into the realm of multi-class classification, showcasing the power of machine learning in recognizing and deciphering handwritten digits for various applications.
"""

import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense,Flatten

(X_train,y_train),(X_test,y_test) = keras.datasets.mnist.load_data()

X_test.shape

y_train

import matplotlib.pyplot as plt
plt.imshow(X_train[2])

X_train = X_train/255
X_test = X_test/255

X_train[0]

"""## **Creating the NEURONS in different layers**"""

model = Sequential()

model.add(Flatten(input_shape=(28,28)))
model.add(Dense(128,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(10,activation='softmax'))

model.summary()

model.compile(loss='sparse_categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])

history = model.fit(X_train,y_train,epochs=25,validation_split=0.2)

y_prob = model.predict(X_test)

y_pred = y_prob.argmax(axis=1)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

plt.imshow(X_test[1])

model.predict(X_test[1].reshape(1,28,28)).argmax(axis=1)